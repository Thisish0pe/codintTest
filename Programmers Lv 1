### 탐욕법 (Greedy) 알고리즘
# <문제 1>
# https://school.programmers.co.kr/learn/courses/30/lessons/42862
# <풀이 1>
def solution(n, lost, reserve):
    lost_del = set(lost) - set(reserve) #교복을 잃어버렸지만 여분의 교복이 있는 학생들은 잃어버린 학생으로 치지 않음
    reserve_del = set(reserve) - set(lost) #교복을 잃어버렸지만 여분의 교복을 가지고 있는 학생들은 여분의 교복을 가진 학생으로만 계산됩니다. 이 단계에서는 여분의 교복을 가진 학생들이 교복을 잃어버린 상태가 아니라는 것을 보장

    for student in reserve_del:
        if student - 1 in lost_del:
            lost_del.remove(student - 1)
        elif student + 1 in lost_del:
            lost_del.remove(student + 1)
    result = n - len(lost_del)
    return result
#<풀이 2>
def solution(n, lost, reserve):
    _reserve = [r for r in reserve if r not in lost]
    _lost = [l for l in lost if l not in reserve]
    for r in _reserve:
        f = r - 1
        b = r + 1
        if f in _lost:
            _lost.remove(f)
        elif b in _lost:
            _lost.remove(b)
    return n - len(_lost)

### 스택과 큐 알고리즘
# <문제 2>
# https://school.programmers.co.kr/learn/courses/30/lessons/12906
# <풀이 1>
def solution(arr):
    answer = []
    for i in arr:
        if len(answer) == 0 or i != answer[-1]:
            answer.append(i)
    return answer

### Dictionary (딕셔너리)
## 달리기 경주
# https://school.programmers.co.kr/learn/courses/30/lessons/178871
# <풀이 1> - 실패코드 : 시간 초과
def solution(players, callings):
    for calling in callings:
        idx = players.index(calling)
        players[idx] , players[idx-1] =  players[idx-1] , players[idx]
    return players
# <풀이 2> - 정답
def solution(players, callings):
    player_dict = {player:rank for rank,player in enumerate(players)}
    rank_dict = {rank:player for rank,player in enumerate(players)}

    for calling in callings:
        rank = player_dict[calling] # 키 값이 이름이기 때문에 이름을 인덱싱하면 밸류값인 순위 추출

        # 순서 바꾸기
        player_dict[rank_dict[rank-1]], player_dict[rank_dict[rank]] = player_dict[rank_dict[rank]], player_dict[rank_dict[rank-1]]
        rank_dict[rank-1], rank_dict[rank] = rank_dict[rank], rank_dict[rank-1]

    # 다시 리스트로 변환
    return list(rank_dict.values())

## 추억 점수
# https://school.programmers.co.kr/learn/courses/30/lessons/176963
# <풀이>
def solution(name, yearning, photo):
    name_dict = {n:y for n,y in zip(name, yearning)} # name_dict = dict(zip(name,yearing))
    answer_array = []
    for i in range(len(photo)):
        answer_sum = 0
        for j in photo[i]:
            if j in name_dict:
                count_memory = name_dict[j] # 위의 주석대로하면 이 부분 삭제 가능
                answer_sum += count_memory
        answer_array.append(answer_sum)
    return answer_array

## 공원산책
# https://school.programmers.co.kr/learn/courses/30/lessons/172928
# <풀이>
def solution(park, routes):
    # 시작점('S') 찾기
    x, y = 0, 0
    for row in range(len(park)):
        for col in range(len(park[row])):
            if park[row][col] == 'S':  # 시작 지점 'S'
                x, y = row, col
    
    # 이동 방향 정의
    op = {'N':(-1, 0), 'S':(1, 0), 'W':(0, -1), 'E':(0, 1)}
    
    # 이동
    for i in routes:
        dx, dy = op[i.split()[0]]  # op에서 해당 방향에 맞는 이동 값 dx, dy로 가져오기
        n = int(i.split()[1])  # 이동 횟수
        
        xx, yy = x, y  # n번의 이동 동안 변하는 좌표 저장 xx, yy
        canmove = True  # 이동할 수 있는 route인지 확인
        
        # n번 이동해보기
        for _ in range(n):
            nx = xx + dx  # 이동한 위치
            ny = yy + dy  # 이동한 위치
            
            # 공원 안에 있고, 장애물이 아니면 이동 가능(True)
            if 0 <= nx <= len(park)-1 and 0 <= ny <= len(park[0])-1 and park[nx][ny] != 'X':
                canmove = True
                xx, yy = nx, ny
            else:  # 공원을 벗어낫거나, 장애물이면 이동 불가(False)
                canmove = False
                break
                
        if canmove:  # 이동이 가능하면 위치 반영해주기
            x, y = nx, ny  
        
    return [x, y]
